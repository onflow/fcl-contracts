// Code generated by go-bindata. DO NOT EDIT.
// sources:
// FCLCrypto.cdc (3.082kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fclcryptoCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x6f\x1a\x3f\x10\xbd\xe7\x53\xcc\x8f\x13\x28\x61\x43\xa4\x9f\x7a\x58\x69\x1b\x11\x1a\xd4\x28\xa8\x44\x10\x9a\x03\xe2\xe0\xec\x0e\xbb\x56\x16\x1b\xd9\x5e\x02\x22\x7c\xf7\x6a\xff\xda\x66\xb7\xa5\x55\xa4\x56\xaa\xba\x27\xdb\x33\x6f\xe6\xcd\x1b\x33\x66\x9d\x3c\x83\xcf\x99\x12\xc4\x57\x30\x1c\x8c\x06\x62\xb7\x56\x1c\xf6\x67\x67\x00\x00\xa9\x75\x99\x30\xd8\xa0\xa0\xcb\xdd\x4c\xa2\x98\xd2\x90\x11\x95\x08\x94\xed\xcc\x23\xfd\x48\x10\x08\x94\xd2\x85\x7e\xbe\xb8\xa8\x2c\x2b\x94\x92\x84\xe8\xc2\x54\x09\xca\x42\x6d\x78\xc1\xdd\x1d\x0b\xa8\x8f\xd2\x85\xf9\x1d\x53\x0b\x6d\x92\x55\x06\x17\xe6\x39\x6e\x91\x19\x3b\x2e\xdc\x70\x1e\xc3\xbe\x72\x15\xa8\x12\xc1\x40\x62\xbc\x74\x72\x8a\x4d\xf4\x2c\x8a\xe4\x98\xa2\x45\xb3\x58\xd8\x56\x93\xab\x5e\xdb\x3e\x26\x69\xbd\xb6\x7d\x02\xbe\x22\x94\x4d\x71\x4d\x04\x51\x94\xb3\x47\x12\xba\x39\xf7\x06\xcb\x30\xe6\xaf\xa9\xde\x3a\x44\x27\x5b\x1d\x9a\x1a\xd3\xf7\x7d\x9e\x30\xf5\x20\x38\x5f\xfe\x6b\xd0\xef\x69\x90\xa9\xb9\xd1\x24\x78\x7b\x03\xad\xd4\x5f\x58\xf7\xa9\x8b\x29\xe8\xc6\xb8\x99\x7f\xe6\x36\x6a\x6b\x63\x69\x66\xf4\xfa\x9d\x5d\x0b\x34\x76\x76\x76\x27\x46\x16\xaa\x08\x3c\xcf\xc8\x5b\x1e\xba\xd0\xba\xc7\x1d\x50\x16\xe0\x16\x62\x2a\x15\x14\x86\x80\xa3\x04\xc6\x15\xac\x88\xf2\x23\x8d\x34\x9d\x5a\x55\xc6\x42\xc8\xf4\x8b\x51\x01\xc9\xef\x19\x78\x10\xa2\x2a\x2e\x5d\xbb\x90\xb0\x63\x79\x16\xea\xdd\xec\x14\x4a\xf0\xca\xad\x13\xa0\xcf\x03\xfc\x8c\xdb\x76\x47\x47\xde\x10\x01\x8a\x2b\x12\x3f\x21\x0d\x23\xe5\xc2\x6c\x48\xb7\x1f\xfe\x07\x0f\x7a\x4e\xcf\x8a\x2a\x11\xd9\xbd\x21\xff\xfe\x8e\xa9\x5c\xb3\x03\x78\xb0\x3f\xd8\x31\x69\x1a\x41\x1f\x2d\xb9\x28\xd4\xc3\x2d\x50\x66\x28\x59\xbe\x30\x0d\xa5\xa6\x22\x7a\xe5\xc6\x79\xc1\x9d\x74\x42\x54\xed\x32\x8e\x5b\x45\xec\xc0\xf5\x35\xac\x09\xa3\x7e\x3b\x53\x7e\x2d\xf8\x86\x06\x18\x68\xc1\x71\x9b\x2a\xcc\x59\x19\xad\xd5\xa9\x25\xd5\xdd\x30\x7b\x3a\xa7\x8b\x66\xe1\xd2\xef\xf2\x12\x6e\x99\x4c\x21\x2a\xa2\x32\xa5\x53\x34\x3d\x22\x79\x5a\x12\x0b\x24\xc1\x0e\x9e\x11\x59\x26\xa0\x8d\xa7\xcb\x23\x55\xe7\xba\x72\xa7\x2c\x6e\x91\x16\xb7\x24\xb1\x3c\xbe\x8d\xa0\xe7\x6a\x66\xb6\x8c\x87\x1a\xd3\x09\xfa\x5c\x04\xa0\x22\x34\x88\xbe\x12\xd9\xc0\xeb\x67\x48\x79\xa0\x44\x82\xdf\xd7\xa3\xc8\x92\xeb\x20\x70\xc3\x5f\x30\xa8\x55\x6f\x44\xa6\x72\x92\x3b\xbd\xaf\x4a\x23\xbf\x6e\x28\x95\xb0\x21\x31\xad\xe7\xff\xcf\x20\xb0\x4e\x9e\x63\xea\xa7\xab\x7c\x62\xb5\x6b\x34\xaa\x80\xc6\x04\xbd\x68\xf4\xc2\xe0\x13\x51\xc4\xb5\x7e\x89\x75\xcf\xc6\x99\xd4\x70\x58\x47\x46\x44\x46\xfd\x38\xe4\x82\xaa\x68\xe5\x9a\x32\x5a\x16\x0b\xd7\x79\x87\xb0\xc6\x84\x48\x1b\x6f\xec\xce\xcd\xe4\xaf\xd9\xd9\x91\xca\xe0\x01\x85\x73\xb8\x32\xe6\x5a\xb9\x3a\xfe\x7b\x60\x06\xfe\xe8\xc1\x55\xaf\x57\x0e\x21\xf3\x51\x49\x7f\xac\x3f\x78\x8f\xca\xb1\x7e\x1a\x30\x18\xfd\x92\xbf\xf9\xd0\x57\xa0\x0c\x45\x19\x55\x6d\x53\xdf\x53\x6f\x26\x78\xd0\x1a\x8e\xc6\x4f\xdd\xaf\x3d\xa7\xd7\x4d\x24\x8a\xd6\x69\x6c\x4e\x37\x83\x0e\x46\xdd\xd9\xf4\x76\x92\xc1\x4f\x23\x4d\xe2\x25\xbc\x3f\x18\x8c\x67\x5f\x1e\xbb\x0f\x93\xf1\x78\x68\xc4\x39\x9c\x1d\xbe\x05\x00\x00\xff\xff\x2e\x1a\x9f\xa4\x0a\x0c\x00\x00"

func fclcryptoCdcBytes() ([]byte, error) {
	return bindataRead(
		_fclcryptoCdc,
		"FCLCrypto.cdc",
	)
}

func fclcryptoCdc() (*asset, error) {
	bytes, err := fclcryptoCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FCLCrypto.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0xab, 0xee, 0xac, 0xf4, 0xfb, 0xd8, 0xf2, 0x4e, 0x1f, 0xf0, 0x33, 0xae, 0x68, 0xf, 0xd, 0xf4, 0x4a, 0xa3, 0x67, 0x1a, 0x51, 0xfd, 0x77, 0x18, 0xff, 0xc6, 0xe3, 0xb3, 0xe7, 0xdb, 0x9b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FCLCrypto.cdc": fclcryptoCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FCLCrypto.cdc": {fclcryptoCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
